# Contig processing, blast on viral sequences against mycobacteriophages, pulling out all mycobacteriophage contigs

#to run snakemake: conda activate cluster_kaiju

#set a workflow config file
#configfile: "Config/ajw_config_samples.yaml"
#SAMPLE = config["samples"]


#if want to run on just some files
SAMPLE = ["49613"]

rule all_checkV:
    input:
        merged="CheckV/merged_quality_summary.tsv"

#rule checkV_contamination:
#    input:
#        fasta="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/assemblies_for_viral_prediction/Sample_{sample}_contigs_renamed.fa"
#    params:
#        threads="4",
#        directory="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/SnakemakePipeline/checkV/{sample}",
#        database="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/checkv-db-v0.6"
#    conda:
#        "Envs/checkV.yaml"
#    output:
#        out="CheckV/{sample}/contamination.tsv"
#    shell:
#        """
#        checkv contamination {input.fasta} {params.directory} -t {params.threads} -d {params.database}
#        """

rule checkV_completeness:
    input:
        fasta="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/assemblies_for_viral_prediction/Sample_{sample}_contigs_renamed.fa",
        contamination="CheckV/{sample}/contamination.tsv"
    params:
        threads="4",
        directory="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/SnakemakePipeline/checkV/{sample}",
        database="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/checkv-db-v0.6"
    conda:
        "Envs/checkV.yaml"
    output:
        out="CheckV/{sample}/completeness.tsv"
    shell:
        """
        checkv completeness {input.fasta} {params.directory} -t {params.threads} -d {params.database}
        """

rule checkV_genomes:
    input:
        fasta="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/assemblies_for_viral_prediction/Sample_{sample}_contigs_renamed.fa",
        complete="CheckV/{sample}/completeness.tsv"
    params:
        threads="16",
        directory="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/SnakemakePipeline/checkV/{sample}",
        database="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/checkv-db-v0.6"
    conda:
        "Envs/checkV.yaml"
    output:
        out="CheckV/{sample}/complete_genomes.tsv"
    shell:
        """
        checkv complete_genomes {input.fasta} {params.directory} 
        """

rule checkV_quality:
    input:
        fasta="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/assemblies_for_viral_prediction/Sample_{sample}_contigs_renamed.fa",
        genome="CheckV/{sample}/complete_genomes.tsv"
    params:
        threads="16",
        directory="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/SnakemakePipeline/checkV/{sample}",
        database="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/checkv-db-v0.6"
    conda:
        "Envs/checkV.yaml"
    output:
        out="CheckV/{sample}/quality_summary.tsv"
    shell:
        """
        checkv quality_summary {input.fasta} {params.directory} 
        """

#to have wildcards in the input of a rule but not in the output of the rule
def table_inputs(folder, name, wildcards):
    files=expand("%s{sample}%s" % (folder, name), sample=SAMPLE)
    return files

rule merge_checkV:
    input: 
        i=table_inputs(folder="CheckV/", name="/quality_summary.tsv", wildcards=SAMPLE)
    output:
        merge="CheckV/merged_quality_summary.tsv"
    script:
        "Scripts/merge_checkv.py"







