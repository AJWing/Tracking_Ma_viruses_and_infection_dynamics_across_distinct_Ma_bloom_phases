# Read mapping 

#to run snakemake: conda activate snakemake

#set a workflow config file
configfile: "Config/ajw_config_samples.yaml"
sample = config["samples"]


#if want to run on just some files
#assemblies = ["B"]
#combos = ["B--mgp80824_B"]

rule all_mappingcompetitively:
    input:
        counts="FeatureCountsORFs/merged_viral_ORF_count.txt",
        annots="DRAM/vrhyme_merged_annotations.tsv"

rule blastdb:
    input:
        fasta="/scratch/duhaimem_root/duhaimem/ajwing/ajw_2014_bloom/2014_erie_assemblies_1kb/sample_{sample}_1kb_contigs.fa"
    params:
        basepath="Blast/{sample}_db"
    output:
        o1="Blast/{sample}_db.nsq",
        o2="Blast/{sample}_db.nin",
        o3="Blast/{sample}_db.nhr"
    shell:
        """
        module load Bioinformatics
        module load blast-plus
        makeblastdb -in {input.fasta} -dbtype nucl -out {params.basepath}
        """

#rule split_genes:
#    input:
#        fa="DRAM/genes.fna"
#    output:
#        fa="DRAM/{assembly}_genes.fna"
#    params:
#        assembly="{assembly}"
#    shell:
#        "python Scripts/split_orf.py {input.fa} {output.fa} {params.assembly}"

rule blast_nf:
    input:
        fa="DRAM/vrhyme_genes.fna",
        i1="Blast/{sample}_db.nhr"
    output:
        o="Blast/{sample}_genes_results.txt"
    params:
        db="Blast/{sample}_db",
        threads=15,
        numalign=5
    shell:
        """
        module load Bioinformatics
        module load blast-plus
        blastn -num_threads {params.threads} -num_alignments {params.numalign} \
        -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore" \
        -db {params.db} -query {input.fa} -out {output.o}
        """

rule blast2gff:
    input:
        blast="Blast/{sample}_genes_results.txt"
    output:
        gff="Blast/{sample}_genes.gff"
    params:
        type="CDS"
    shell:
        "python Scripts/blast2gff_orf.py {input.blast} {output.gff} {params.type}"

rule featureCounts:
    input:
        gff="Blast/{sample}_genes.gff",
        bam="Bowtie2/sorted_reads/erie_vrhyme_and_good_contigs_Sample{sample}_sorted.bam"
    output:
        output="FeatureCountsORFs/{sample}_viral_ORF_count.txt"
    params:
        type="CDS",
        g="ID"
    shell:
        """
        module load singularity
        singularity exec /nfs/turbo/lsa-dudelabs/containers/subreads/subreads.sif featureCounts -p -t {params.type} -a {{input_gff}} -g {params.g} -o {output.output} {input.bam}
        """

rule mergeorfmapping:
    input:
        counts=lambda wildcards: ["FeatureCountsORFs/{0}_viral_ORF_count.txt".format(combo) for combo in sample]
    output:
        merged="FeatureCountsORFs/merged_viral_ORF_count.txt"
    shell:
        "python Scripts/merge_orf_mapping.py {output.merged} {input.counts}"




